import pandas as pd
import numpy as np
from ingestion import load_data  # Assuming ingestion.py contains a function `load_data`

def reduce_memory_usage(df):
    """
    Reduces memory usage of a DataFrame by downcasting numerical and object types where possible.

    Parameters:
    df (pd.DataFrame): The DataFrame to optimize.

    Returns:
    pd.DataFrame: Memory-optimized DataFrame.
    """
    start_mem = df.memory_usage().sum() / 1024**2
    print(f"Initial memory usage: {start_mem:.2f} MB")

    for col in df.columns:
        col_type = df[col].dtype

        if col_type != object:
            c_min = df[col].min()
            c_max = df[col].max()
            if pd.api.types.is_integer_dtype(df[col]):
                # Downcast integer columns
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)
            else:
                # Downcast float columns
                df[col] = pd.to_numeric(df[col], downcast='float')
        else:
            # Convert object types to category for memory efficiency
            df[col] = df[col].astype('category')

    end_mem = df.memory_usage().sum() / 1024**2
    print(f"Final memory usage after optimization: {end_mem:.2f} MB")
    print(f"Reduced memory by: {100 * (start_mem - end_mem) / start_mem:.1f}%")

    return df

def preprocess_data(df, dependent_column):
    """
    Perform data preprocessing including:
    - Handling missing values and specific flags in the 'rating' column.
    - Flagging rows with missing numerical values.
    - Flagging outliers in the dependent column.
    - Converting the dependent variable from float to int by truncating decimals.
    - Memory optimization for efficient processing.

    Parameters:
    df (pd.DataFrame): Raw DataFrame loaded from the ingestion module.
    dependent_column (str): The dependent variable/column for the model.

    Returns:
    pd.DataFrame, pd.DataFrame: Two DataFrames - one preprocessed dataset and one containing outliers.
    """
    
    # Flag missing or specific values ('WR', 'NR') in the 'rating' column
    df['rating_flag'] = df['rating'].apply(lambda x: 1 if pd.isna(x) or x in ['WR', 'NR'] else 0)

    # Handle missing values in numerical columns
    numerical_columns = df.select_dtypes(include=[np.number]).columns
    for col in numerical_columns:
        df[f'{col}_missing_flag'] = df[col].apply(lambda x: 1 if pd.isna(x) else 0)

    # Convert dependent variable from float to int (truncate decimal part)
    df[dependent_column] = np.floor(df[dependent_column]).astype(int)

    # Flag outliers in the dependent column based on given range
    df[f'{dependent_column}_outlier_flag'] = df[dependent_column].apply(
        lambda x: 1 if pd.isna(x) or x < 5 or x > 10000 else 0
    )

    # Split the dataset into preprocessed and outliers
    outlier_df = df[df[f'{dependent_column}_outlier_flag'] == 1]
    preprocessed_df = df[df[f'{dependent_column}_outlier_flag'] == 0]

    # Fill missing values in numerical columns with median (optional)
    preprocessed_df[numerical_columns] = preprocessed_df[numerical_columns].fillna(preprocessed_df[numerical_columns].median())

    # Optimize memory usage of the preprocessed dataset
    preprocessed_df = reduce_memory_usage(preprocessed_df)

    return preprocessed_df, outlier_df
